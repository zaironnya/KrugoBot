# -*- coding: utf-8 -*-
import os
import sys
import time
import asyncio
import threading
import subprocess
from dataclasses import dataclass
from typing import Optional, List, Tuple
from http.server import SimpleHTTPRequestHandler, HTTPServer
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton

# ==========================
# üîß –ö–æ–Ω—Ñ–∏–≥
# ==========================
TOKEN = os.getenv("TG_TOKEN")
CHANNEL_ID = -1003223590941
ADMIN_ID = 1052210475
TEMP_DIR = "temp_videos"
MAX_DURATION = 60
MAX_FILE_SIZE_MB = 20
KEEPALIVE_PORT = int(os.getenv("PORT", 10000))

os.makedirs(TEMP_DIR, exist_ok=True)

bot = Bot(token=TOKEN)
dp = Dispatcher()

PROCESS_START_TS = time.time()
active_users = set()

# ==========================
# üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á
# ==========================
_events_last_24h: List[Tuple[float, int]] = []

def _prune_events():
    cutoff = time.time() - 24 * 3600
    while _events_last_24h and _events_last_24h[0][0] < cutoff:
        _events_last_24h.pop(0)

def add_video_event(user_id: int):
    _events_last_24h.append((time.time(), user_id))
    _prune_events()

def get_stats_last_24h() -> Tuple[int, int]:
    _prune_events()
    users = {u for _, u in _events_last_24h}
    return len(users), len(_events_last_24h)

# ==========================
# üéÆ –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
# ==========================
def reactor_bar(progress: int) -> str:
    total = 11
    center = total // 2
    bar = ["‚ñë"] * total
    bar[center] = "üí†"
    wave_symbols = ["üí´", "üî•", "üí•"]
    wave_steps = min(len(wave_symbols), progress // 33 + 1)
    for i in range(1, wave_steps + 1):
        left, right = center - i, center + i
        if left >= 0:
            bar[left] = wave_symbols[i - 1]
        if right < total:
            bar[right] = wave_symbols[i - 1]
    return "[" + "".join(bar) + "]"

progress_phrases = [
    "‚öôÔ∏è –ó–∞–ø—É—Å–∫ —Ä–µ–∞–∫—Ç–æ—Ä–∞...",
    "‚ö° –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏...",
    "üî• –í–æ–ª–Ω–æ–≤–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ...",
    "üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞...",
    "‚ú® –†–µ–Ω–¥–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω!"
]

async def animate_progress(msg: types.Message):
    last = ""
    for i in range(0, 101, 10):
        bar = reactor_bar(i)
        phrase_index = min(i // 25, len(progress_phrases) - 1)
        text = f"{bar}\n     {i}%\n{progress_phrases[phrase_index]}"
        if text != last:
            try:
                await msg.edit_text(text)
                last = text
            except:
                pass
        await asyncio.sleep(0.25)

# ==========================
# üß† –ü–æ–¥–ø–∏—Å–∫–∞
# ==========================
async def check_subscription(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ("member", "administrator", "creator")
    except:
        return False

def get_sub_button() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/Krugobotchanel"),
        InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")
    ]])

last_confirm_messages: dict[int, int] = {}

@dp.callback_query(F.data == "check_sub")
async def on_check_sub(cb: types.CallbackQuery):
    user = cb.from_user
    if await check_subscription(user.id):
        try:
            await cb.message.delete()
        except:
            pass
        m = await cb.message.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ üé•")
        last_confirm_messages[user.id] = m.message_id
    else:
        await cb.answer("–¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!", show_alert=True)

# ==========================
# üó£ –ö–æ–º–∞–Ω–¥—ã
# ==========================
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.reply(
        f"‚ö° –ü—Ä–∏–≤–µ—Ç!\n"
        f"–û—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ –¥–æ {MAX_DURATION} —Å–µ–∫—É–Ω–¥ –∏ –Ω–µ –±–æ–ª–µ–µ {MAX_FILE_SIZE_MB} –ú–ë ‚Äî —è —Å–¥–µ–ª–∞—é –∏–∑ –Ω–µ–≥–æ —Å—Ç–∏–ª—å–Ω—ã–π –∫—Ä—É–∂–æ–∫ ‚≠ï\n\n"
        f"‚ö†Ô∏è –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤–∏–¥–µ–æ –∑–∞ —Ä–∞–∑.\n"
        f"–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ —Å—Ç–∏–ª–µ Video Reactor üí†"
    )

@dp.message(Command("status"))
async def status_cmd(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    uptime = int(time.time() - PROCESS_START_TS)
    hours, minutes = uptime // 3600, (uptime % 3600) // 60
    files = os.listdir(TEMP_DIR)
    total_size_mb = sum(os.path.getsize(os.path.join(TEMP_DIR, f)) for f in files) / (1024 * 1024)
    users24, videos24 = get_stats_last_24h()
    await message.reply(
        "üí† KrugoBot –∞–∫—Ç–∏–≤–µ–Ω!\n"
        f"‚è± –ê–ø—Ç–∞–π–º: {hours} —á {minutes} –º–∏–Ω\n"
        f"üë• –ó–∞ 24 —á: {users24} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"üé¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ: {videos24}\n"
        f"‚öôÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(active_users)}\n"
        f"üìÇ TEMP: {len(files)} —Ñ–∞–π–ª–æ–≤ ({total_size_mb:.1f} –ú–ë)\n"
        "üåê Keep-alive OK, –∞–≤—Ç–æ-—Ä–µ—Å—Ç–∞—Ä—Ç –≤–∫–ª—é—á—ë–Ω ‚úÖ"
    )

# ==========================
# üé• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
# ==========================
@dp.message(lambda m: m.video or m.document)
async def handle_video(message: types.Message):
    user_id = message.from_user.id
    if user_id in active_users:
        await message.reply("‚è≥ –î–æ–∂–¥–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ.")
        return
    active_users.add(user_id)

    mid = last_confirm_messages.pop(user_id, None)
    if mid:
        try:
            await bot.delete_message(message.chat.id, mid)
        except:
            pass

    if not await check_subscription(user_id):
        sent = await message.reply(
            "üö´ –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!\n–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ üëá",
            reply_markup=get_sub_button()
        )
        try:
            await message.delete()
        except:
            pass
        active_users.discard(user_id)
        return

    try:
        file_id = (message.video or message.document).file_id
        file_info = await bot.get_file(file_id)
        if file_info.file_size > MAX_FILE_SIZE_MB * 1024 * 1024:
            await message.reply(f"‚ö†Ô∏è –§–∞–π–ª –±–æ–ª—å—à–µ {MAX_FILE_SIZE_MB} –ú–ë!")
            active_users.discard(user_id)
            return

        src_path = os.path.join(TEMP_DIR, os.path.basename(file_info.file_path))
        await bot.download_file(file_info.file_path, destination=src_path)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        result = subprocess.run(
            ["ffprobe", "-v", "error", "-show_entries", "format=duration",
             "-of", "default=noprint_wrappers=1:nokey=1", src_path],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE
        )
        duration = float(result.stdout or 0)
        if duration > MAX_DURATION:
            os.remove(src_path)
            await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ –¥–ª–∏–Ω–Ω–µ–µ {MAX_DURATION} —Å–µ–∫—É–Ω–¥.")
            active_users.discard(user_id)
            return

        status_msg = await message.reply("‚öôÔ∏è –ó–∞–ø—É—Å–∫ —Ä–µ–∞–∫—Ç–æ—Ä–∞...")
        await animate_progress(status_msg)

        # üé¨ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ü–µ–Ω–∞ (—Å —Ç—è–Ω—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º)
        await status_msg.edit_text("‚ú® –†–µ–Ω–¥–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω!\nüåÄ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ...")
        await asyncio.sleep(1.3)
        for phase in [
            "üí´ –°–∂–∏–º–∞–µ–º –≤–∏–¥–µ–æ...",
            "üî• –ó–∞–≤–µ—Ä—à–∞–µ–º —É–ø–∞–∫–æ–≤–∫—É...",
            "‚úÖ –ì–æ—Ç–æ–≤–æ!"
        ]:
            try:
                await status_msg.edit_text(phase)
            except:
                pass
            await asyncio.sleep(1.2)

        video_note_path = os.path.join(TEMP_DIR, f"video_note_{message.message_id}.mp4")

        # üîß –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ffmpeg (–º–µ–Ω—å—à–µ —Ä–∞–∑–º–µ—Ä, —Ç–∞ –∂–µ —á–µ—Ç–∫–æ—Å—Ç—å)
        proc = await asyncio.create_subprocess_exec(
            "ffmpeg", "-y", "-analyzeduration", "0", "-probesize", "32M",
            "-i", src_path,
            "-vf", "crop='min(iw,ih)':'min(iw,ih)',scale=480:480:flags=lanczos",
            "-b:v", "1M", "-bufsize", "1M", "-maxrate", "1M",
            "-movflags", "+faststart",
            "-pix_fmt", "yuv420p",
            "-threads", "2",
            "-preset", "ultrafast", "-tune", "zerolatency",
            "-c:v", "libx264", "-c:a", "aac", video_note_path,
            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
        )

        # ‚ö° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä—É–∂–æ–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –ø–æ–∫–∞ –∏–¥—ë—Ç ‚Äú–æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram‚Äù
        send_task = asyncio.create_task(bot.send_video_note(message.chat.id, video_note=FSInputFile(video_note_path)))

        for phase in [
            "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram...",
            "‚òÅÔ∏è –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ –æ–±–ª–∞–∫–æ...",
            "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"
        ]:
            try:
                await status_msg.edit_text(phase)
            except:
                pass
            await asyncio.sleep(1.8)

        await send_task

        add_video_event(user_id)
        await bot.delete_message(message.chat.id, message.message_id)
        await bot.delete_message(message.chat.id, status_msg.message_id)

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        active_users.discard(user_id)
        for path in [src_path, os.path.join(TEMP_DIR, f"video_note_{message.message_id}.mp4")]:
            asyncio.create_task(asyncio.to_thread(lambda p=path: os.remove(p) if os.path.exists(p) else None))

# ==========================
# üåê Keep-alive
# ==========================
class LoggingHandler(SimpleHTTPRequestHandler):
    def log_message(self, format, *args):
        ip = self.client_address[0]
        ua = self.headers.get("User-Agent", "")
        if "cron-job.org" in ua:
            print(f"‚è∞ –ü–∏–Ω–≥ –æ—Ç cron-job.org ({ip})")
        else:
            print(f"üîÅ –ü–∏–Ω–≥ –æ—Ç {ip}")

def run_keepalive_server():
    server = HTTPServer(("0.0.0.0", KEEPALIVE_PORT), LoggingHandler)
    print(f"üåê Keep-alive server –Ω–∞ –ø–æ—Ä—Ç—É {KEEPALIVE_PORT}")
    server.serve_forever()

# ==========================
# üöÄ –ó–∞–ø—É—Å–∫
# ==========================
if __name__ == "__main__":
    os.system('cls' if os.name == 'nt' else 'clear')
    print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
    print("‚úÖ BOT STARTED ‚Äî Telegram Video Reactor active")
    print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")

    threading.Thread(target=run_keepalive_server, daemon=True).start()

    async def main():
        while True:
            try:
                await dp.start_polling(bot)
            except Exception as e:
                if "Conflict" in str(e):
                    print("‚ö†Ô∏è Conflict –ø—Ä–∏ polling. –ñ–¥—É 10 —Å–µ–∫...")
                    await asyncio.sleep(10)
                else:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ polling: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫.")
                    await asyncio.sleep(5)

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
