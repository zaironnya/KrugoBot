# -*- coding: utf-8 -*-
import os
import time
import asyncio
import threading
import subprocess
from dataclasses import dataclass
from typing import Optional, List, Tuple, Dict
from http.server import SimpleHTTPRequestHandler, HTTPServer

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton

# ==========================
# üîß –ö–æ–Ω—Ñ–∏–≥
# ==========================
TOKEN = os.getenv("TG_TOKEN")                        # –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
CHANNEL_ID = -1003223590941                          # –ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
ADMIN_ID = 1052210475                                # —Ç–≤–æ–π Telegram ID
TEMP_DIR = "temp_videos"                             # –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
MAX_DURATION = 60                                    # —Å–µ–∫.
MAX_FILE_SIZE_MB = 20                                # –ú–ë (–¥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è)
KEEPALIVE_PORT = int(os.getenv("PORT", 10000))       # Render Free ‚Äú–ø–æ—Ä—Ç –¥–ª—è —Å–∫–∞–Ω–∞‚Äù
SUB_CACHE_TTL = 6 * 3600                             # –∫—ç—à –ø–æ–¥–ø–∏—Å–∫–∏, 6 —á–∞—Å–æ–≤

os.makedirs(TEMP_DIR, exist_ok=True)

bot = Bot(token=TOKEN)
dp = Dispatcher()

PROCESS_START_TS = time.time()

# ==========================
# üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 24—á
# ==========================
_events_last_24h: List[Tuple[float, int]] = []

def _prune_events() -> None:
    cutoff = time.time() - 24 * 3600
    while _events_last_24h and _events_last_24h[0][0] < cutoff:
        _events_last_24h.pop(0)

def add_video_event(user_id: int) -> None:
    _events_last_24h.append((time.time(), user_id))
    _prune_events()

def get_stats_last_24h() -> Tuple[int, int]:
    _prune_events()
    users = {u for _, u in _events_last_24h}
    return len(users), len(_events_last_24h)

# ==========================
# üë§ –õ–∏–º–∏—Ç: 1 –≤–∏–¥–µ–æ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ==========================
active_users: set[int] = set()

# ==========================
# üß† –ü–æ–¥–ø–∏—Å–∫–∞ (—Å –∫—ç—à–µ–º)
# ==========================
_sub_cache: Dict[int, Tuple[bool, float]] = {}  # user_id -> (is_ok, ts)

async def check_subscription(user_id: int) -> bool:
    now = time.time()
    cached = _sub_cache.get(user_id)
    if cached and now - cached[1] < SUB_CACHE_TTL:
        return cached[0]
    try:
        m = await bot.get_chat_member(CHANNEL_ID, user_id)
        ok = m.status in ("member", "administrator", "creator")
    except Exception:
        ok = False
    _sub_cache[user_id] = (ok, now)
    return ok

def get_sub_button() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/Krugobotchanel"),
        InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")
    ]])

last_confirm_messages: Dict[int, int] = {}

@dp.callback_query(F.data == "check_sub")
async def on_check_sub(cb: types.CallbackQuery):
    user = cb.from_user
    if await check_subscription(user.id):
        try:
            await cb.message.delete()
        except Exception:
            pass
        m = await cb.message.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ üé•")
        last_confirm_messages[user.id] = m.message_id
    else:
        await cb.answer("–¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!", show_alert=True)

# ==========================
# üîò –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
# ==========================
def reactor_bar(progress: int) -> str:
    total = 11
    center = total // 2
    bar = ["‚ñë"] * total
    bar[center] = "üí†"
    wave_symbols = ["üí´", "üî•", "üí•"]
    wave_steps = min(len(wave_symbols), progress // 33 + 1)
    for i in range(1, wave_steps + 1):
        left, right = center - i, center + i
        if left >= 0:
            bar[left] = wave_symbols[i - 1]
        if right < total:
            bar[right] = wave_symbols[i - 1]
    return "[" + "".join(bar) + "]"

progress_phrases = [
    "‚öôÔ∏è –ó–∞–ø—É—Å–∫ —Ä–µ–∞–∫—Ç–æ—Ä–∞...",
    "‚ö° –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏...",
    "üî• –í–æ–ª–Ω–æ–≤–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ...",
    "üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞...",
    "‚ú® –†–µ–Ω–¥–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω!"
]

async def animate_progress(msg: types.Message):
    last = ""
    for i in range(0, 101, 10):
        bar = reactor_bar(i)
        idx = min(i // 25, len(progress_phrases) - 1)
        text = f"{bar}\n     {i}%\n{progress_phrases[idx]}"
        if text != last:
            try:
                await msg.edit_text(text)
                last = text
            except Exception:
                pass
        await asyncio.sleep(0.25)

# ==========================
# üó£ –ö–æ–º–∞–Ω–¥—ã
# ==========================
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.reply(
        f"‚ö° –ü—Ä–∏–≤–µ—Ç!\n"
        f"–û—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ –¥–æ {MAX_DURATION} —Å–µ–∫—É–Ω–¥ –∏ –Ω–µ –±–æ–ª–µ–µ {MAX_FILE_SIZE_MB} –ú–ë ‚Äî —è —Å–¥–µ–ª–∞—é –∫—Ä—É–∂–æ–∫ ‚≠ï\n\n"
        f"‚ö†Ô∏è –ó–∞ —Ä–∞–∑ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤–∏–¥–µ–æ. –î–æ–∂–¥–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º.\n"
        "–ü—Ä–æ–µ–∫—Ç –≤ —Å—Ç–∏–ª–µ Video Reactor üí†"
    )

@dp.message(Command("status"))
async def status_cmd(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    uptime = int(time.time() - PROCESS_START_TS)
    hours, minutes = uptime // 3600, (uptime % 3600) // 60
    files = []
    try:
        files = os.listdir(TEMP_DIR)
    except Exception:
        pass
    total_size_mb = 0.0
    for f in files:
        p = os.path.join(TEMP_DIR, f)
        try:
            total_size_mb += os.path.getsize(p) / (1024 * 1024)
        except Exception:
            pass
    users24, videos24 = get_stats_last_24h()
    await message.reply(
        "üí† KrugoBot –∞–∫—Ç–∏–≤–µ–Ω!\n"
        f"‚è± –ê–ø—Ç–∞–π–º: {hours} —á {minutes} –º–∏–Ω\n"
        f"üë• –ó–∞ 24 —á: {users24} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"üé¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ: {videos24}\n"
        f"‚öôÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(active_users)}\n"
        f"üìÇ TEMP: {len(files)} —Ñ–∞–π–ª–æ–≤ ({total_size_mb:.1f} –ú–ë)\n"
        "üåê Keep-alive OK, –∞–≤—Ç–æ-—Ä–µ—Å—Ç–∞—Ä—Ç –≤–∫–ª—é—á—ë–Ω ‚úÖ"
    )

# ==========================
# üé• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ (1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí 1 –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞)
# ==========================
@dp.message(lambda m: m.video or m.document)
async def handle_video(message: types.Message):
    user_id = message.from_user.id

    # –ù–µ –¥–∞—ë–º —Å–ø–∞–º–∏—Ç—å, –ø–æ–∫–∞ –∏–¥—ë—Ç –∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–¥–∞—á–∞
    if user_id in active_users:
        await message.reply("‚è≥ –î–æ–∂–¥–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º.")
        return
    active_users.add(user_id)

    # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä–æ–µ ¬´–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ¬ª
    mid = last_confirm_messages.pop(user_id, None)
    if mid:
        try:
            await bot.delete_message(message.chat.id, mid)
        except Exception:
            pass

    # –ü–æ–¥–ø–∏—Å–∫–∞
    if not await check_subscription(user_id):
        sent = await message.reply(
            "üö´ –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!\n–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ üëá",
            reply_markup=get_sub_button()
        )
        try:
            await message.delete()
        except Exception:
            pass
        active_users.discard(user_id)
        return

    src_path = None
    video_note_path = None

    try:
        file_id = (message.video or message.document).file_id
        file_info = await bot.get_file(file_id)

        # –†–∞–∑–º–µ—Ä –¥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        if file_info.file_size and file_info.file_size > MAX_FILE_SIZE_MB * 1024 * 1024:
            await message.reply(f"‚ö†Ô∏è –§–∞–π–ª –±–æ–ª—å—à–µ {MAX_FILE_SIZE_MB} –ú–ë!")
            return

        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞
        uniq = f"{message.chat.id}_{message.message_id}_{int(time.time())}"
        src_path = os.path.join(TEMP_DIR, f"src_{uniq}.mp4")
        video_note_path = os.path.join(TEMP_DIR, f"note_{uniq}.mp4")

        # –°–∫–∞—á–∏–≤–∞–µ–º
        await bot.download_file(file_info.file_path, destination=src_path)

        # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        try:
            res = subprocess.run(
                ["ffprobe", "-v", "error", "-show_entries", "format=duration",
                 "-of", "default=noprint_wrappers=1:nokey=1", src_path],
                stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=30
            )
            duration = float(res.stdout or 0)
        except Exception:
            duration = 0.0

        if duration > MAX_DURATION:
            try:
                os.remove(src_path)
            except Exception:
                pass
            await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ –¥–ª–∏–Ω–Ω–µ–µ {MAX_DURATION} —Å–µ–∫—É–Ω–¥.")
            return

        # –°—Ç–∞—Ç—É—Å –∏ –∞–Ω–∏–º–∞—Ü–∏—è
        status_msg = await message.reply("‚öôÔ∏è –ó–∞–ø—É—Å–∫ —Ä–µ–∞–∫—Ç–æ—Ä–∞...")
        await animate_progress(status_msg)

        # –§–∏–Ω–∞–ª—å–Ω—ã–µ —ç—Ç–∞–ø—ã
        await status_msg.edit_text("‚ú® –†–µ–Ω–¥–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω!\nüåÄ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ...")
        await asyncio.sleep(1.2)
        for phase in ["üí´ –°–∂–∏–º–∞–µ–º –≤–∏–¥–µ–æ...", "üî• –ó–∞–≤–µ—Ä—à–∞–µ–º —É–ø–∞–∫–æ–≤–∫—É...", "‚úÖ –ì–æ—Ç–æ–≤–æ!"]:
            try:
                await status_msg.edit_text(phase)
            except Exception:
                pass
            await asyncio.sleep(1.2)

        # ffmpeg (–Ω–∞–¥—ë–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Free-–∏–Ω—Å—Ç–∞–Ω—Å–∞)
        # –±–∞–ª–∞–Ω—Å: —Å–∫–æ—Ä–æ—Å—Ç—å / —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å / —Ä–∞–∑–º–µ—Ä
        proc = await asyncio.create_subprocess_exec(
            "ffmpeg", "-y",
            "-analyzeduration", "0", "-probesize", "32M",
            "-i", src_path,
            "-vf", "crop='min(iw,ih)':'min(iw,ih)',scale=480:480:flags=lanczos",
            "-pix_fmt", "yuv420p",
            "-b:v", "1M", "-bufsize", "1M", "-maxrate", "1M",
            "-threads", "2",
            "-preset", "ultrafast", "-tune", "zerolatency",
            "-movflags", "+faststart",
            "-c:v", "libx264", "-c:a", "aac",
            video_note_path,
            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
        )
        await proc.wait()

        # –ú–∞–ª–µ–Ω—å–∫–∞—è –ø–∞—É–∑–∞ ‚Äî —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–æ—á–Ω–æ –≤—Å—ë —Å–±—Ä–æ—Å–∏—Ç
        await asyncio.sleep(0.3)
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ñ–∞–π–ª —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å –∏ –Ω–µ –ø—É—Å—Ç
        if not (os.path.exists(video_note_path) and os.path.getsize(video_note_path) > 0):
            raise RuntimeError("ffmpeg produced empty output")

        # –û—Ç–ø—Ä–∞–≤–æ—á–Ω–∞—è —Å—Ü–µ–Ω–∞ —Å ¬´—Ç—è–Ω—É—â–∏–º¬ª UI
        try:
            await status_msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ...")
        except Exception:
            pass
        await asyncio.sleep(1.2)
        try:
            await status_msg.edit_text("‚òÅÔ∏è –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥‚Ä¶")
        except Exception:
            pass
        await asyncio.sleep(1.4)

        # –ù–∞–¥—ë–∂–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å —Ä–µ—Ç—Ä–∞—è–º–∏ (—É—Å—Ç—Ä–∞–Ω—è–µ—Ç ClientOSError)
        async def send_note_with_retries(path: str, chat_id: int, retries: int = 2):
            delay = 2
            for attempt in range(retries + 1):
                try:
                    await bot.send_video_note(chat_id, video_note=FSInputFile(path))
                    return
                except Exception as e:
                    if attempt >= retries:
                        raise
                    await asyncio.sleep(delay)
                    delay *= 2  # —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞

        await send_note_with_retries(video_note_path, message.chat.id)

        # –ì–æ—Ç–æ–≤–æ!
        try:
            await status_msg.edit_text("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        except Exception:
            pass

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ + –∫–ª–∏–Ω–∞–ø —á–∞—Ç–æ–≤
        add_video_event(user_id)
        try:
            await bot.delete_message(message.chat.id, message.message_id)
        except Exception:
            pass
        try:
            await bot.delete_message(message.chat.id, status_msg.message_id)
        except Exception:
            pass

    except Exception as e:
        # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç ‚Äî —ç—Ç–æ ‚Äú–≤—Ç–æ—Ä–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä polling‚Äù, –ø–æ–¥–æ–∂–¥—ë–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º –∂–∏—Ç—å
        if "Conflict" in str(e):
            print("‚ö†Ô∏è TelegramConflictError: –º—è–≥–∫–∞—è –ø–∞—É–∑–∞ 10—Å.")
            await asyncio.sleep(10)
        else:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        active_users.discard(user_id)
        # –§–∞–π–ª—ã —É–±–∏—Ä–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –Ω–∞–¥—ë–∂–Ω–æ
        for p in (src_path, video_note_path):
            try:
                if p and os.path.exists(p):
                    os.remove(p)
            except Exception:
                pass

# ==========================
# üåê Keep-alive (Render Free)
# ==========================
class LoggingHandler(SimpleHTTPRequestHandler):
    def log_message(self, format, *args):
        ip = self.client_address[0]
        ua = self.headers.get("User-Agent", "")
        if "cron-job.org" in ua:
            print(f"‚è∞ –ü–∏–Ω–≥ –æ—Ç cron-job.org ({ip})")
        else:
            print(f"üîÅ –ü–∏–Ω–≥ –æ—Ç {ip}")

def run_keepalive_server():
    server = HTTPServer(("0.0.0.0", KEEPALIVE_PORT), LoggingHandler)
    print(f"üåê Keep-alive server –Ω–∞ –ø–æ—Ä—Ç—É {KEEPALIVE_PORT}")
    server.serve_forever()

# ==========================
# üöÄ –ó–∞–ø—É—Å–∫ —Å –∞–≤—Ç–æ-–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
# ==========================
if __name__ == "__main__":
    os.system('cls' if os.name == 'nt' else 'clear')
    print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
    print("‚úÖ BOT STARTED ‚Äî Telegram Video Reactor active")
    print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")

    # Keep-alive —Å–µ—Ä–≤–µ—Ä ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–º –¥–µ–º–æ–Ω–æ–º
    threading.Thread(target=run_keepalive_server, daemon=True).start()

    async def main():
        # –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª polling —Å –º—è–≥–∫–∏–º–∏ –±—ç–∫–æ—Ñ—Ñ–∞–º–∏
        backoff = 5
        while True:
            try:
                await dp.start_polling(bot)
                backoff = 5  # –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏ ‚Äî —Å–±—Ä–æ—Å–∏–º
            except Exception as e:
                text = str(e)
                if "Conflict" in text:
                    # –≤—Ç–æ—Ä–æ–π —á–∏—Ç–∞—Ç–µ–ª—å getUpdates ‚Äî –∂–¥—ë–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                    wait = 10
                else:
                    # –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ç–∏/—Ä–µ–Ω–¥–µ—Ä–∞ ‚Äî —Ä–∞—Å—Ç—É—â–∏–π –±—ç–∫–æ—Ñ—Ñ
                    wait = backoff
                    backoff = min(backoff * 2, 60)
                print(f"‚ö†Ô∏è Polling error: {e}. Retry in {wait}s.")
                await asyncio.sleep(wait)

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
