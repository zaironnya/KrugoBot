# -*- coding: utf-8 -*-
import os
import asyncio
import subprocess
import sys
import time
import threading
from http.server import SimpleHTTPRequestHandler, HTTPServer
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton

# üîê –¢–æ–∫–µ–Ω –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TG_TOKEN")

CHANNEL_ID = -1003223590941
TEMP_DIR = "temp_videos"
MAX_DURATION = 60        # —Å–µ–∫—É–Ω–¥
MAX_FILE_SIZE_MB = 20    # –ª–∏–º–∏—Ç —Ñ–∞–π–ª–∞
ADMIN_ID = 1052210475    # —Ç–≤–æ–π Telegram ID

os.makedirs(TEMP_DIR, exist_ok=True)

bot = Bot(token=TOKEN)
dp = Dispatcher()

last_confirm_messages = {}
start_time = time.time()


# üéÆ –†–µ–∞–∫—Ç–æ—Ä–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä
def reactor_bar(progress: int):
    total = 11
    center = total // 2
    bar = ["‚ñë"] * total
    bar[center] = "üí†"
    wave_symbols = ["üí´", "üî•", "üí•"]
    wave_steps = min(len(wave_symbols), progress // 33 + 1)
    for i in range(1, wave_steps + 1):
        left = center - i
        right = center + i
        if left >= 0:
            bar[left] = wave_symbols[i - 1]
        if right < total:
            bar[right] = wave_symbols[i - 1]
    return "[" + "".join(bar) + "]"


# üé® –°–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
progress_phrases = [
    "‚öôÔ∏è –ó–∞–ø—É—Å–∫ —Ä–µ–∞–∫—Ç–æ—Ä–∞...",
    "‚ö° –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏...",
    "üî• –í–æ–ª–Ω–æ–≤–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ...",
    "üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞...",
    "‚ú® –†–µ–Ω–¥–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω!"
]


# üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(user_id: int):
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception:
        return False


# üîó –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def get_sub_button():
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/Krugobotchanel"),
        InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")
    ]])


# üåÄ –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
async def animate_progress(message: types.Message):
    last_text = ""
    for i in range(0, 101, 10):
        bar = reactor_bar(i)
        phrase_index = min(i // 25, len(progress_phrases) - 1)
        text = f"{bar}\n     {i}%\n{progress_phrases[phrase_index]}"
        try:
            if text != last_text:
                await message.edit_text(text)
                last_text = text
        except Exception:
            pass
        await asyncio.sleep(0.25)


# üöÄ /start
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.reply(
        f"‚ö° –ü—Ä–∏–≤–µ—Ç!\n"
        f"–°–∫–∏–Ω—å –≤–∏–¥–µ–æ –¥–æ {MAX_DURATION} —Å–µ–∫—É–Ω–¥ –∏ –Ω–µ –±–æ–ª–µ–µ {MAX_FILE_SIZE_MB} –ú–ë ‚Äî —è —Å–¥–µ–ª–∞—é –∏–∑ –Ω–µ–≥–æ —Å—Ç–∏–ª—å–Ω—ã–π –∫—Ä—É–∂–æ–∫ ‚≠ï\n\n"
        "–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ —Å—Ç–∏–ª–µ Video Reactor üí†"
    )


# üí¨ /status ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è
@dp.message(Command("status"))
async def status_cmd(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    uptime = int(time.time() - start_time)
    hours, remainder = divmod(uptime, 3600)
    minutes = remainder // 60
    files = os.listdir(TEMP_DIR)
    total_size = sum(os.path.getsize(os.path.join(TEMP_DIR, f)) for f in files) / (1024 * 1024)
    await message.reply(
        f"üí† KrugoBot –∞–∫—Ç–∏–≤–µ–Ω!\n"
        f"‚è± –ê–ø—Ç–∞–π–º: {hours} —á {minutes} –º–∏–Ω\n"
        f"üìÇ –í temp_videos: {len(files)} —Ñ–∞–π–ª–æ–≤ ({total_size:.1f} –ú–ë)\n"
        f"üåê Keep-alive OK, –∞–≤—Ç–æ-—Ä–µ—Å—Ç–∞—Ä—Ç –≤–∫–ª—é—á—ë–Ω ‚úÖ"
    )


# üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
@dp.callback_query(F.data == "check_sub")
async def check_subscription_callback(callback: types.CallbackQuery):
    user = callback.from_user
    if await check_subscription(user.id):
        try:
            await callback.message.delete()
        except:
            pass
        confirm_msg = await callback.message.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ üé•")
        last_confirm_messages[user.id] = confirm_msg.message_id
    else:
        await callback.answer("–¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!", show_alert=True)


# üé• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
@dp.message(lambda m: m.video or m.document)
async def handle_video(message: types.Message):
    user_id = message.from_user.id

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if user_id in last_confirm_messages:
        try:
            await bot.delete_message(message.chat.id, last_confirm_messages[user_id])
        except:
            pass
        last_confirm_messages.pop(user_id, None)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not await check_subscription(user_id):
        sent = await message.reply(
            "üö´ –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!\n\n–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ üëá",
            reply_markup=get_sub_button()
        )
        try:
            await message.delete()
        except:
            pass
        return

    sent_message = await message.reply("‚öôÔ∏è –ó–∞–ø—É—Å–∫ —Ä–µ–∞–∫—Ç–æ—Ä–∞...")

    try:
        file_id = message.video.file_id if message.video else message.document.file_id
        file_info = await bot.get_file(file_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if file_info.file_size > MAX_FILE_SIZE_MB * 1024 * 1024:
            await sent_message.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –±–æ–ª—å—à–µ {MAX_FILE_SIZE_MB} –ú–ë!")
            return

        local_path = os.path.join(TEMP_DIR, os.path.basename(file_info.file_path))
        await bot.download_file(file_info.file_path, destination=local_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        result = subprocess.run(
            ["ffprobe", "-v", "error", "-show_entries", "format=duration",
             "-of", "default=noprint_wrappers=1:nokey=1", local_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        try:
            duration = float(result.stdout or 0)
        except ValueError:
            duration = 0.0
        if duration > MAX_DURATION:
            await sent_message.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ –¥–ª–∏–Ω–Ω–µ–µ {MAX_DURATION} —Å–µ–∫—É–Ω–¥.")
            os.remove(local_path)
            return

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
        await animate_progress(sent_message)
        await sent_message.edit_text("‚ú® –†–µ–Ω–¥–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω!\nüåÄ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ... –ü–∞—Ä—É —Å–µ–∫—É–Ω–¥!")
        await asyncio.sleep(1.5)
        for phase in ["üí´ –°–∂–∏–º–∞–µ–º –≤–∏–¥–µ–æ...", "üî• –ó–∞–≤–µ—Ä—à–∞–µ–º —É–ø–∞–∫–æ–≤–∫—É...", "‚úÖ –ì–æ—Ç–æ–≤–æ!"]:
            await sent_message.edit_text(phase)
            await asyncio.sleep(0.8)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ ‚Üí –∫—Ä—É–∂–æ–∫
        video_note_path = os.path.join(TEMP_DIR, "video_note.mp4")
        process = await asyncio.create_subprocess_exec(
            "ffmpeg", "-y", "-i", local_path,
            "-vf", "crop='min(iw,ih)':'min(iw,ih)',scale=512:512",
            "-preset", "ultrafast", "-c:v", "libx264", "-c:a", "aac", video_note_path,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL
        )
        await process.wait()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä—É–∂–æ–∫
        await bot.send_video_note(message.chat.id, video_note=FSInputFile(video_note_path))

        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ –∏–∑ —á–∞—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä—É–∂–∫–∞
        try:
            await message.delete()
        except:
            pass

        # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await sent_message.delete()

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
        os.remove(local_path)
        os.remove(video_note_path)

    except Exception as e:
        if "Conflict" in str(e):
            print("‚ö†Ô∏è Telegram Conflict, –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
            await asyncio.sleep(5)
            return
        await sent_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        try:
            os.remove(local_path)
        except:
            pass
        try:
            await message.delete()
        except:
            pass


# üü¢ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    os.system('cls' if os.name == 'nt' else 'clear')
    print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
    print("‚úÖ BOT STARTED ‚Äî Telegram Video Reactor active")
    print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")

    # üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ temp
    def clean_temp_folder():
        now = time.time()
        for f in os.listdir(TEMP_DIR):
            path = os.path.join(TEMP_DIR, f)
            if os.path.isfile(path) and now - os.path.getmtime(path) > 900:
                os.remove(path)
                print(f"üßπ –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {f}")

    def clean_loop():
        while True:
            clean_temp_folder()
            time.sleep(1800)

    threading.Thread(target=clean_loop, daemon=True).start()

    # üåê Keep-alive
    class LoggingHandler(SimpleHTTPRequestHandler):
        def log_message(self, format, *args):
            ip = self.client_address[0]
            ua = self.headers.get("User-Agent", "")
            if "cron-job.org" in ua:
                print(f"‚è∞ –ü–∏–Ω–≥ –æ—Ç cron-job.org ({ip})")
            else:
                print(f"üîÅ –ü–∏–Ω–≥ –æ—Ç {ip}")

    def run_server():
        port = int(os.getenv("PORT", 10000))
        server = HTTPServer(("0.0.0.0", port), LoggingHandler)
        print(f"üåê Keep-alive server –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        server.serve_forever()

    threading.Thread(target=run_server, daemon=True).start()

    # ‚ôªÔ∏è –ê–≤—Ç–æ-—Ä–µ—Å—Ç–∞—Ä—Ç
    while True:
        try:
            asyncio.run(dp.start_polling(bot))
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}")
            time.sleep(5)
