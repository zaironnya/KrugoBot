# -*- coding: utf-8 -*-
import os
import sys
import time
import math
import asyncio
import threading
import subprocess
from dataclasses import dataclass
from typing import Optional, List, Tuple

from http.server import SimpleHTTPRequestHandler, HTTPServer

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton

# ==========================
# üîß –ö–æ–Ω—Ñ–∏–≥
# ==========================
TOKEN = os.getenv("TG_TOKEN")                  # –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
CHANNEL_ID = -1003223590941                    # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
ADMIN_ID = 1052210475                          # —Ç–≤–æ–π Telegram ID
TEMP_DIR = "temp_videos"                       # –ø–∞–ø–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
MAX_DURATION = 60                              # –º–∞–∫—Å. –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Å–µ–∫—É–Ω–¥
MAX_FILE_SIZE_MB = 20                          # –º–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞, MB
KEEPALIVE_PORT = int(os.getenv("PORT", 10000)) # –ø–æ—Ä—Ç –¥–ª—è Render keep-alive

os.makedirs(TEMP_DIR, exist_ok=True)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–¥–ª—è –∞–ø—Ç–∞–π–º–∞)
PROCESS_START_TS = time.time()

# ==========================
# üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞
# ==========================
# –•—Ä–∞–Ω–∏–º —Å–æ–±—ã—Ç–∏—è –≤–∏–¥–∞ (ts, user_id)
_events_last_24h: List[Tuple[float, int]] = []

def _prune_events() -> None:
    """–£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤."""
    cutoff = time.time() - 24*3600
    while _events_last_24h and _events_last_24h[0][0] < cutoff:
        _events_last_24h.pop(0)

def add_video_event(user_id: int) -> None:
    """–î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    _events_last_24h.append((time.time(), user_id))
    _prune_events()

def get_stats_last_24h() -> Tuple[int, int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∫–æ–ª-–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ–ª-–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ) –∑–∞ 24 —á–∞—Å–∞."""
    _prune_events()
    users = {u for _, u in _events_last_24h}
    return (len(users), len(_events_last_24h))

# ==========================
# üßµ –û—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
# ==========================
queue: "asyncio.Queue[dict]" = asyncio.Queue()
_worker_task: Optional[asyncio.Task] = None

@dataclass
class TaskItem:
    chat_id: int
    user_id: int
    original_message_id: int
    status_message_id: int
    src_path: str

# ==========================
# üîò –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä / –∞–Ω–∏–º–∞—Ü–∏—è
# ==========================
def reactor_bar(progress: int) -> str:
    total = 11
    center = total // 2
    bar = ["‚ñë"] * total
    bar[center] = "üí†"
    wave_symbols = ["üí´", "üî•", "üí•"]
    wave_steps = min(len(wave_symbols), progress // 33 + 1)
    for i in range(1, wave_steps + 1):
        left = center - i
        right = center + i
        if left >= 0:
            bar[left] = wave_symbols[i - 1]
        if right < total:
            bar[right] = wave_symbols[i - 1]
    return "[" + "".join(bar) + "]"

progress_phrases = [
    "‚öôÔ∏è –ó–∞–ø—É—Å–∫ —Ä–µ–∞–∫—Ç–æ—Ä–∞...",
    "‚ö° –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏...",
    "üî• –í–æ–ª–Ω–æ–≤–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ...",
    "üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞...",
    "‚ú® –†–µ–Ω–¥–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω!"
]

async def animate_progress(msg: types.Message):
    last = ""
    for i in range(0, 101, 10):
        bar = reactor_bar(i)
        phrase_index = min(i // 25, len(progress_phrases) - 1)
        text = f"{bar}\n     {i}%\n{progress_phrases[phrase_index]}"
        if text != last:
            try:
                await msg.edit_text(text)
                last = text
            except Exception:
                pass
        await asyncio.sleep(0.25)

# ==========================
# üß† –ü–æ–¥–ø–∏—Å–∫–∞ / –ö–Ω–æ–ø–∫–∏
# ==========================
async def check_subscription(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ("member", "administrator", "creator")
    except Exception:
        return False

def get_sub_button() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/Krugobotchanel"),
        InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")
    ]])

last_confirm_messages: dict[int, int] = {}

@dp.callback_query(F.data == "check_sub")
async def on_check_sub(cb: types.CallbackQuery):
    user = cb.from_user
    if await check_subscription(user.id):
        try:
            await cb.message.delete()
        except Exception:
            pass
        m = await cb.message.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ üé•")
        last_confirm_messages[user.id] = m.message_id
    else:
        await cb.answer("–¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!", show_alert=True)

# ==========================
# üó£ –ö–æ–º–∞–Ω–¥—ã
# ==========================
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.reply(
        f"‚ö° –ü—Ä–∏–≤–µ—Ç!\n"
        f"–°–∫–∏–Ω—å –≤–∏–¥–µ–æ –¥–æ {MAX_DURATION} —Å–µ–∫—É–Ω–¥ –∏ –Ω–µ –±–æ–ª–µ–µ {MAX_FILE_SIZE_MB} –ú–ë ‚Äî —è —Å–¥–µ–ª–∞—é –∏–∑ –Ω–µ–≥–æ —Å—Ç–∏–ª—å–Ω—ã–π –∫—Ä—É–∂–æ–∫ ‚≠ï\n\n"
        f"–í–∏–¥–µ–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø–æ –æ—á–µ—Ä–µ–¥–∏ ‚Äî –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –∑–∞–Ω—è—Ç–∞, —è –ø–æ–¥—Å–∫–∞–∂—É –ø–æ–∑–∏—Ü–∏—é.\n\n"
        "–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ —Å—Ç–∏–ª–µ Video Reactor üí†"
    )

@dp.message(Command("status"))
async def status_cmd(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    uptime = int(time.time() - PROCESS_START_TS)
    hours, minutes = uptime // 3600, (uptime % 3600) // 60

    # —Ñ–∞–π–ª—ã –≤ temp
    files = []
    try:
        files = os.listdir(TEMP_DIR)
    except Exception:
        files = []
    total_size_mb = 0.0
    for f in files:
        try:
            total_size_mb += os.path.getsize(os.path.join(TEMP_DIR, f)) / (1024 * 1024)
        except Exception:
            pass

    users24, videos24 = get_stats_last_24h()

    qsize = queue.qsize()
    await message.reply(
        "üí† KrugoBot –∞–∫—Ç–∏–≤–µ–Ω!\n"
        f"‚è± –ê–ø—Ç–∞–π–º: {hours} —á {minutes} –º–∏–Ω\n"
        f"üë• –ó–∞ 24 —á: {users24} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"üé¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ: {videos24}\n"
        f"üß∞ –û—á–µ—Ä–µ–¥—å: {qsize} –≤ –æ–∂–∏–¥–∞–Ω–∏–∏\n"
        f"üìÇ –í temp_videos: {len(files)} —Ñ–∞–π–ª–æ–≤ ({total_size_mb:.1f} –ú–ë)\n"
        "üåê Keep-alive OK, –∞–≤—Ç–æ-—Ä–µ—Å—Ç–∞—Ä—Ç –≤–∫–ª—é—á—ë–Ω ‚úÖ"
    )

# ==========================
# üì• –ü—Ä–∏—ë–º –≤–∏–¥–µ–æ (POST ‚Üí –æ—á–µ—Ä–µ–¥—å)
# ==========================
@dp.message(lambda m: m.video or m.document)
async def handle_incoming_video(message: types.Message):
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –±—ã–ª–æ "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏" ‚Äî —É–¥–∞–ª–∏–º
    mid = last_confirm_messages.pop(user_id, None)
    if mid:
        try:
            await bot.delete_message(message.chat.id, mid)
        except Exception:
            pass

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not await check_subscription(user_id):
        sent = await message.reply(
            "üö´ –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!\n\n–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ üëá",
            reply_markup=get_sub_button()
        )
        try:
            await message.delete()
        except Exception:
            pass
        return

    # –ü–æ–ª—É—á–∞–µ–º file_id –∏ file_info
    try:
        file_id = (message.video or message.document).file_id
        file_info = await bot.get_file(file_id)
    except Exception as e:
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª: {e}")
        return

    # –õ–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞
    if file_info.file_size and file_info.file_size > MAX_FILE_SIZE_MB * 1024 * 1024:
        await message.reply(f"‚ö†Ô∏è –§–∞–π–ª –±–æ–ª—å—à–µ {MAX_FILE_SIZE_MB} –ú–ë! –û—Ç–ø—Ä–∞–≤—å –º–µ–Ω—å—à–∏–π —Ñ–∞–π–ª.")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
    src_path = os.path.join(TEMP_DIR, os.path.basename(file_info.file_path))
    try:
        await bot.download_file(file_info.file_path, destination=src_path)
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (ffprobe)
    try:
        result = subprocess.run(
            ["ffprobe", "-v", "error", "-show_entries", "format=duration",
             "-of", "default=noprint_wrappers=1:nokey=1", src_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        duration = float(result.stdout or 0)
    except Exception:
        duration = 0.0

    if duration > MAX_DURATION:
        try:
            os.remove(src_path)
        except Exception:
            pass
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ –¥–ª–∏–Ω–Ω–µ–µ {MAX_DURATION} —Å–µ–∫—É–Ω–¥.")
        return

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    status_msg = await message.reply("‚öôÔ∏è –ó–∞–ø—É—Å–∫ —Ä–µ–∞–∫—Ç–æ—Ä–∞...")

    # –°—Ç–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å
    await queue.put(TaskItem(
        chat_id=message.chat.id,
        user_id=user_id,
        original_message_id=message.message_id,
        status_message_id=status_msg.message_id,
        src_path=src_path
    ).__dict__)

    pos = queue.qsize()  # –ø–æ–∑–∏—Ü–∏—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    if pos > 1:
        await status_msg.edit_text(f"‚è≥ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å ({pos} –≤ –æ–∂–∏–¥–∞–Ω–∏–∏).")
    else:
        await status_msg.edit_text("üåÄ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–≤–æ–µ–≥–æ –≤–∏–¥–µ–æ...")

# ==========================
# üõ† –í–æ—Ä–∫—ë—Ä –æ—á–µ—Ä–µ–¥–∏
# ==========================
async def worker_loop():
    """–û–¥–∏–Ω –≤–æ—Ä–∫—ë—Ä: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ."""
    while True:
        item: dict = await queue.get()
        task = TaskItem(**item)

        try:
            # –û–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å
            try:
                status_msg = await bot.edit_message_text(
                    chat_id=task.chat_id,
                    message_id=task.status_message_id,
                    text="üåÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å..."
                )
            except Exception:
                # –ø–æ–ª—É—á–∏–º —Å–∞–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤–æ–µ
                try:
                    status_msg = await bot.send_message(task.chat_id, "üåÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...")
                except Exception:
                    status_msg = None

            # –ê–Ω–∏–º–∞—Ü–∏—è
            if status_msg:
                try:
                    await animate_progress(status_msg)
                except Exception:
                    pass

            # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è (–≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ç–∞–ø—ã)
            if status_msg:
                try:
                    await bot.edit_message_text(
                        chat_id=task.chat_id,
                        message_id=status_msg.message_id,
                        text="‚ú® –†–µ–Ω–¥–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω!\nüåÄ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ... –ü–∞—Ä—É —Å–µ–∫—É–Ω–¥!"
                    )
                except Exception:
                    pass
                await asyncio.sleep(1.5)
                for phase in ["üí´ –°–∂–∏–º–∞–µ–º –≤–∏–¥–µ–æ...", "üî• –ó–∞–≤–µ—Ä—à–∞–µ–º —É–ø–∞–∫–æ–≤–∫—É...", "‚úÖ –ì–æ—Ç–æ–≤–æ!"]:
                    try:
                        await bot.edit_message_text(
                            chat_id=task.chat_id,
                            message_id=status_msg.message_id,
                            text=phase
                        )
                    except Exception:
                        pass
                    await asyncio.sleep(0.8)

            # –ì–æ—Ç–æ–≤–∏–º –ø—É—Ç—å –¥–ª—è –∫—Ä—É–∂–∫–∞
            video_note_path = os.path.join(TEMP_DIR, f"video_note_{task.original_message_id}.mp4")

            # ffmpeg ‚Üí –∫—Ä—É–∂–æ–∫
            proc = await asyncio.create_subprocess_exec(
                "ffmpeg", "-y", "-i", task.src_path,
                "-vf", "crop='min(iw,ih)':'min(iw,ih)',scale=512:512",
                "-preset", "ultrafast", "-c:v", "libx264", "-c:a", "aac", video_note_path,
                stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
            )
            await proc.wait()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä—É–∂–æ–∫
            await bot.send_video_note(task.chat_id, video_note=FSInputFile(video_note_path))

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            add_video_event(task.user_id)

            # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await bot.delete_message(task.chat_id, task.original_message_id)
            except Exception:
                pass

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if status_msg:
                try:
                    await bot.delete_message(task.chat_id, status_msg.message_id)
                except Exception:
                    pass

        except Exception as e:
            # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç ‚Äî –ø–æ–¥–æ–∂–¥—ë–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º ¬´–º—è–≥–∫–æ¬ª
            if "Conflict" in str(e):
                print("‚ö†Ô∏è TelegramConflictError –≤ –≤–æ—Ä–∫—ë—Ä–µ. –ñ–¥—ë–º 10 —Å–µ–∫ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º.")
                await asyncio.sleep(10)
            else:
                # –ø–æ–ø—Ä–æ–±—É–µ–º —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    await bot.send_message(task.chat_id, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                except Exception:
                    pass
        finally:
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
            for p in (task.src_path, os.path.join(TEMP_DIR, f"video_note_{task.original_message_id}.mp4")):
                try:
                    if os.path.exists(p):
                        os.remove(p)
                except Exception:
                    pass
            queue.task_done()

# ==========================
# üßπ –ê–≤—Ç–æ-–æ—á–∏—Å—Ç–∫–∞ temp
# ==========================
def _clean_temp_once():
    now = time.time()
    for f in os.listdir(TEMP_DIR):
        path = os.path.join(TEMP_DIR, f)
        try:
            if os.path.isfile(path) and now - os.path.getmtime(path) > 900:  # 15 –º–∏–Ω—É—Ç
                os.remove(path)
                print(f"üßπ –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {f}")
        except Exception:
            pass

def _clean_temp_loop():
    while True:
        _clean_temp_once()
        time.sleep(900)  # –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç

# ==========================
# üåê Keep-alive —Å–µ—Ä–≤–µ—Ä
# ==========================
class LoggingHandler(SimpleHTTPRequestHandler):
    def log_message(self, format, *args):
        ip = self.client_address[0]
        ua = self.headers.get("User-Agent", "")
        if "cron-job.org" in ua:
            print(f"‚è∞ –ü–∏–Ω–≥ –æ—Ç cron-job.org ({ip})")
        else:
            print(f"üîÅ –ü–∏–Ω–≥ –æ—Ç {ip}")

def run_keepalive_server():
    server = HTTPServer(("0.0.0.0", KEEPALIVE_PORT), LoggingHandler)
    print(f"üåê Keep-alive server –Ω–∞ –ø–æ—Ä—Ç—É {KEEPALIVE_PORT}")
    server.serve_forever()

# ==========================
# üöÄ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# ==========================
if __name__ == "__main__":
    os.system('cls' if os.name == 'nt' else 'clear')
    print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
    print("‚úÖ BOT STARTED ‚Äî Telegram Video Reactor active")
    print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")

    # –ü–æ—Ç–æ–∫: –∞–≤—Ç–æ-–æ—á–∏—Å—Ç–∫–∞
    threading.Thread(target=_clean_temp_loop, daemon=True).start()

    # –ü–æ—Ç–æ–∫: keep-alive —Å–µ—Ä–≤–µ—Ä
    threading.Thread(target=run_keepalive_server, daemon=True).start()

    async def main():
        global _worker_task
        # –°—Ç–∞—Ä—Ç—É–µ–º –≤–æ—Ä–∫—ë—Ä –æ—á–µ—Ä–µ–¥–∏
        _worker_task = asyncio.create_task(worker_loop())
        # –°—Ç–∞—Ä—Ç—É–µ–º polling. –ï—Å–ª–∏ Conflict ‚Äî –º—è–≥–∫–æ –ø–æ–¥–æ–∂–¥—ë–º –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–º.
        while True:
            try:
                await dp.start_polling(bot)
            except Exception as e:
                if "Conflict" in str(e):
                    print("‚ö†Ô∏è Conflict –ø—Ä–∏ polling. –ñ–¥—É 10 —Å–µ–∫ –∏ –ø—Ä–æ–±—É—é –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å–Ω–æ–≤–∞...")
                    await asyncio.sleep(10)
                    continue
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ polling: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫.")
                await asyncio.sleep(5)

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
