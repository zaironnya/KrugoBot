# -*- coding: utf-8 -*-
import os
import time
import asyncio
import threading
import subprocess
from typing import List, Tuple, Dict
from http.server import SimpleHTTPRequestHandler, HTTPServer

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton

# ==========================
# üîß –ö–æ–Ω—Ñ–∏–≥
# ==========================
TOKEN = os.getenv("TG_TOKEN")
CHANNEL_ID = -1003223590941
ADMIN_ID = 1052210475
TEMP_DIR = "temp_videos"
MAX_DURATION = 60
MAX_FILE_SIZE_MB = 20
KEEPALIVE_PORT = int(os.getenv("PORT", 10000))

os.makedirs(TEMP_DIR, exist_ok=True)

bot = Bot(token=TOKEN)
dp = Dispatcher()
PROCESS_START_TS = time.time()

# ==========================
# üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
# ==========================
_events_last_24h: List[Tuple[float, int]] = []

def _prune_events():
    cutoff = time.time() - 24 * 3600
    while _events_last_24h and _events_last_24h[0][0] < cutoff:
        _events_last_24h.pop(0)

def add_video_event(user_id: int):
    _events_last_24h.append((time.time(), user_id))
    _prune_events()

def get_stats_last_24h() -> Tuple[int, int]:
    _prune_events()
    users = {u for _, u in _events_last_24h}
    return len(users), len(_events_last_24h)

# ==========================
# üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
# ==========================
_sub_cache: Dict[int, Tuple[bool, float]] = {}
SUB_CACHE_TTL = 6 * 3600  # 6 —á–∞—Å–æ–≤

async def check_subscription(user_id: int, force_refresh: bool = False) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ï—Å–ª–∏ force_refresh=True ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∫—ç—à –∏ –¥–µ–ª–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏.
    """
    now = time.time()
    if not force_refresh:
        cached = _sub_cache.get(user_id)
        if cached and now - cached[1] < SUB_CACHE_TTL:
            return cached[0]

    try:
        # Telegram –∏–Ω–æ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å, –ø–æ—ç—Ç–æ–º—É 3 –ø–æ–ø—ã—Ç–∫–∏
        for _ in range(3):
            member = await bot.get_chat_member(CHANNEL_ID, user_id)
            if member.status in ("member", "administrator", "creator"):
                _sub_cache[user_id] = (True, now)
                return True
            await asyncio.sleep(1.2)  # –ø–æ–¥–æ–∂–¥–∞—Ç—å, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è
        _sub_cache[user_id] = (False, now)
        return False
    except Exception:
        return False

def get_sub_button() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/Krugobotchanel"),
        InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")
    ]])

last_confirm_messages: Dict[int, int] = {}

@dp.callback_query(F.data == "check_sub")
async def on_check_sub(cb: types.CallbackQuery):
    user = cb.from_user
    if await check_subscription(user.id, force_refresh=True):
        try:
            await cb.message.delete()
        except:
            pass
        m = await cb.message.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ üé•")
        last_confirm_messages[user.id] = m.message_id
    else:
        await cb.answer(
            "–ü—Ä–æ–≤–µ—Ä—å –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ ‚Äî Telegram –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–µ —Å—Ä–∞–∑—É ‚è≥",
            show_alert=True
        )

# ==========================
# üßµ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
# ==========================
active_users: set[int] = set()

# ==========================
# üîò –ü—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä
# ==========================
def reactor_bar(progress: int) -> str:
    total = 11
    center = total // 2
    bar = ["‚ñë"] * total
    bar[center] = "üí†"
    wave_symbols = ["üí´", "üî•", "üí•"]
    wave_steps = min(len(wave_symbols), progress // 33 + 1)
    for i in range(1, wave_steps + 1):
        left, right = center - i, center + i
        if left >= 0:
            bar[left] = wave_symbols[i - 1]
        if right < total:
            bar[right] = wave_symbols[i - 1]
    return "[" + "".join(bar) + "]"

progress_phrases = [
    "‚öôÔ∏è –ó–∞–ø—É—Å–∫ —Ä–µ–∞–∫—Ç–æ—Ä–∞...",
    "‚ö° –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏...",
    "üî• –í–æ–ª–Ω–æ–≤–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ...",
    "üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞...",
    "‚ú® –†–µ–Ω–¥–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω!"
]

async def animate_progress(msg: types.Message):
    last = ""
    for i in range(0, 101, 10):
        bar = reactor_bar(i)
        idx = min(i // 25, len(progress_phrases) - 1)
        text = f"{bar}\n     {i}%\n{progress_phrases[idx]}"
        if text != last:
            try:
                await msg.edit_text(text)
                last = text
            except:
                pass
        await asyncio.sleep(0.25)

# ==========================
# üé¨ –ö–æ–º–∞–Ω–¥—ã
# ==========================
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.reply(
        f"‚ö° –ü—Ä–∏–≤–µ—Ç!\n"
        f"–û—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ –¥–æ {MAX_DURATION} —Å–µ–∫—É–Ω–¥ –∏ –Ω–µ –±–æ–ª–µ–µ {MAX_FILE_SIZE_MB} –ú–ë ‚Äî —è —Å–¥–µ–ª–∞—é –∫—Ä—É–∂–æ–∫ ‚≠ï\n\n"
        f"‚ö†Ô∏è –ó–∞ —Ä–∞–∑ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤–∏–¥–µ–æ.\n"
        "–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ —Å—Ç–∏–ª–µ Video Reactor üí†"
    )

@dp.message(Command("status"))
async def status_cmd(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    uptime = int(time.time() - PROCESS_START_TS)
    hours, minutes = uptime // 3600, (uptime % 3600) // 60
    users24, videos24 = get_stats_last_24h()
    temp_files = len(os.listdir(TEMP_DIR))
    await message.reply(
        f"üí† KrugoBot –∞–∫—Ç–∏–≤–µ–Ω!\n"
        f"‚è± –ê–ø—Ç–∞–π–º: {hours} —á {minutes} –º–∏–Ω\n"
        f"üë• –ó–∞ 24 —á: {users24} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"üé¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ: {videos24}\n"
        f"‚öôÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(active_users)}\n"
        f"üìÇ –í TEMP: {temp_files} —Ñ–∞–π–ª–æ–≤\n"
        "üåê Keep-alive OK ‚úÖ"
    )

# ==========================
# üé• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
# ==========================
@dp.message(lambda m: m.video or m.document)
async def handle_video(message: types.Message):
    user_id = message.from_user.id
    if user_id in active_users:
        await message.reply("‚è≥ –î–æ–∂–¥–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ.")
        return
    active_users.add(user_id)

    if not await check_subscription(user_id):
        await message.reply(
            "üö´ –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!\n–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª üëá",
            reply_markup=get_sub_button()
        )
        active_users.discard(user_id)
        return

    src_path = None
    video_note_path = None
    status_msg = None

    try:
        file_id = (message.video or message.document).file_id
        file_info = await bot.get_file(file_id)

        if file_info.file_size > MAX_FILE_SIZE_MB * 1024 * 1024:
            await message.reply(f"‚ö†Ô∏è –§–∞–π–ª –±–æ–ª—å—à–µ {MAX_FILE_SIZE_MB} –ú–ë!")
            return

        uniq = f"{user_id}_{int(time.time())}"
        src_path = os.path.join(TEMP_DIR, f"src_{uniq}.mp4")
        video_note_path = os.path.join(TEMP_DIR, f"note_{uniq}.mp4")

        await bot.download_file(file_info.file_path, destination=src_path)

        status_msg = await message.reply("‚öôÔ∏è –ó–∞–ø—É—Å–∫ —Ä–µ–∞–∫—Ç–æ—Ä–∞...")
        await animate_progress(status_msg)

        await status_msg.edit_text("‚ú® –†–µ–Ω–¥–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω!\nüåÄ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ...")
        await asyncio.sleep(1.1)
        for phase in ["üí´ –°–∂–∏–º–∞–µ–º –≤–∏–¥–µ–æ...", "üî• –ó–∞–≤–µ—Ä—à–∞–µ–º —É–ø–∞–∫–æ–≤–∫—É...", "‚úÖ –ì–æ—Ç–æ–≤–æ!"]:
            await status_msg.edit_text(phase)
            await asyncio.sleep(1.2)

        # FFmpeg ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–ø–∏—Å—å
        proc = await asyncio.create_subprocess_exec(
            "ffmpeg", "-y", "-analyzeduration", "0", "-probesize", "32M",
            "-i", src_path,
            "-vf", "crop='min(iw,ih)':'min(iw,ih)',scale=480:480:flags=lanczos",
            "-pix_fmt", "yuv420p",
            "-preset", "ultrafast", "-c:v", "libx264", "-c:a", "aac",
            "-movflags", "+faststart",
            video_note_path,
            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
        )
        await proc.wait()

        # üîí –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        if os.path.exists(video_note_path):
            with open(video_note_path, "rb") as f:
                os.fsync(f.fileno())

        # üïì –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
        for _ in range(6):
            if os.path.exists(video_note_path) and os.path.getsize(video_note_path) > 0:
                break
            await asyncio.sleep(0.5)

        for text in ["üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ...", "‚òÅÔ∏è –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥..."]:
            await status_msg.edit_text(text)
            await asyncio.sleep(1.5)

        async def safe_send():
            delay = 2
            for i in range(3):
                try:
                    await bot.send_video_note(message.chat.id, video_note=FSInputFile(video_note_path))
                    return
                except Exception as e:
                    if i == 2:
                        raise
                    await asyncio.sleep(delay)
                    delay *= 2

        await safe_send()
        await status_msg.edit_text("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

        add_video_event(user_id)
        await bot.delete_message(message.chat.id, message.message_id)
        await bot.delete_message(message.chat.id, status_msg.message_id)

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        active_users.discard(user_id)
        for p in [src_path, video_note_path]:
            try:
                if p and os.path.exists(p):
                    os.remove(p)
            except:
                pass

# ==========================
# üåê Keep-alive
# ==========================
class LoggingHandler(SimpleHTTPRequestHandler):
    def log_message(self, format, *args):
        ip = self.client_address[0]
        print(f"üîÅ –ü–∏–Ω–≥ –æ—Ç {ip}")

def run_keepalive_server():
    server = HTTPServer(("0.0.0.0", KEEPALIVE_PORT), LoggingHandler)
    print(f"üåê Keep-alive server –Ω–∞ –ø–æ—Ä—Ç—É {KEEPALIVE_PORT}")
    server.serve_forever()

# ==========================
# üöÄ –ó–∞–ø—É—Å–∫
# ==========================
if __name__ == "__main__":
    os.system("cls" if os.name == "nt" else "clear")
    print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
    print("‚úÖ BOT STARTED ‚Äî Video Reactor stable build")
    print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")

    threading.Thread(target=run_keepalive_server, daemon=True).start()

    async def main():
        while True:
            try:
                await dp.start_polling(bot)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ polling: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10—Å.")
                await asyncio.sleep(10)

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
